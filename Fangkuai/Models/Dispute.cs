using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class Dispute 
    {
        public Dispute(string disputeId = null,
            Models.Money amountMoney = null,
            string reason = null,
            string state = null,
            string dueAt = null,
            Models.DisputedPayment disputedPayment = null,
            IList<string> evidenceIds = null,
            string cardBrand = null,
            string createdAt = null,
            string updatedAt = null,
            string brandDisputeId = null,
            string reportedDate = null,
            int? version = null,
            string locationId = null)
        {
            DisputeId = disputeId;
            AmountMoney = amountMoney;
            Reason = reason;
            State = state;
            DueAt = dueAt;
            DisputedPayment = disputedPayment;
            EvidenceIds = evidenceIds;
            CardBrand = cardBrand;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            BrandDisputeId = brandDisputeId;
            ReportedDate = reportedDate;
            Version = version;
            LocationId = locationId;
        }

        /// <summary>
        /// Unique ID for this `Dispute`, generated by Square.
        /// </summary>
        [JsonProperty("dispute_id")]
        public string DisputeId { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("amount_money")]
        public Models.Money AmountMoney { get; }

        /// <summary>
        /// List of possible reasons why a cardholder might initiate a
        /// dispute with their bank.
        /// </summary>
        [JsonProperty("reason")]
        public string Reason { get; }

        /// <summary>
        /// List of possible dispute states.
        /// </summary>
        [JsonProperty("state")]
        public string State { get; }

        /// <summary>
        /// The time when the next action is due, in RFC 3339 format.
        /// </summary>
        [JsonProperty("due_at")]
        public string DueAt { get; }

        /// <summary>
        /// The payment the cardholder disputed.
        /// </summary>
        [JsonProperty("disputed_payment")]
        public Models.DisputedPayment DisputedPayment { get; }

        /// <summary>
        /// The IDs of the evidence associated with the dispute.
        /// </summary>
        [JsonProperty("evidence_ids")]
        public IList<string> EvidenceIds { get; }

        /// <summary>
        /// Indicates a card's brand, such as `VISA` or `MASTERCARD`.
        /// </summary>
        [JsonProperty("card_brand")]
        public string CardBrand { get; }

        /// <summary>
        /// Timestamp when the dispute was created, in RFC 3339 format.
        /// </summary>
        [JsonProperty("created_at")]
        public string CreatedAt { get; }

        /// <summary>
        /// Timestamp when dispute was last updated, in RFC 3339 format.
        /// </summary>
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; }

        /// <summary>
        /// ID of the dispute in the card brand system, generated by the card brand.
        /// </summary>
        [JsonProperty("brand_dispute_id")]
        public string BrandDisputeId { get; }

        /// <summary>
        /// Timestamp when the dispute was reported, in RFC 3339 format.
        /// </summary>
        [JsonProperty("reported_date")]
        public string ReportedDate { get; }

        /// <summary>
        /// The current version of the `Dispute`.
        /// </summary>
        [JsonProperty("version")]
        public int? Version { get; }

        /// <summary>
        /// The ID of location where dispute originated.
        /// </summary>
        [JsonProperty("location_id")]
        public string LocationId { get; }

        public Builder ToBuilder()
        {
            var builder = new Builder()
                .DisputeId(DisputeId)
                .AmountMoney(AmountMoney)
                .Reason(Reason)
                .State(State)
                .DueAt(DueAt)
                .DisputedPayment(DisputedPayment)
                .EvidenceIds(EvidenceIds)
                .CardBrand(CardBrand)
                .CreatedAt(CreatedAt)
                .UpdatedAt(UpdatedAt)
                .BrandDisputeId(BrandDisputeId)
                .ReportedDate(ReportedDate)
                .Version(Version)
                .LocationId(LocationId);
            return builder;
        }

        public class Builder
        {
            private string disputeId;
            private Models.Money amountMoney;
            private string reason;
            private string state;
            private string dueAt;
            private Models.DisputedPayment disputedPayment;
            private IList<string> evidenceIds = new List<string>();
            private string cardBrand;
            private string createdAt;
            private string updatedAt;
            private string brandDisputeId;
            private string reportedDate;
            private int? version;
            private string locationId;

            public Builder() { }
            public Builder DisputeId(string value)
            {
                disputeId = value;
                return this;
            }

            public Builder AmountMoney(Models.Money value)
            {
                amountMoney = value;
                return this;
            }

            public Builder Reason(string value)
            {
                reason = value;
                return this;
            }

            public Builder State(string value)
            {
                state = value;
                return this;
            }

            public Builder DueAt(string value)
            {
                dueAt = value;
                return this;
            }

            public Builder DisputedPayment(Models.DisputedPayment value)
            {
                disputedPayment = value;
                return this;
            }

            public Builder EvidenceIds(IList<string> value)
            {
                evidenceIds = value;
                return this;
            }

            public Builder CardBrand(string value)
            {
                cardBrand = value;
                return this;
            }

            public Builder CreatedAt(string value)
            {
                createdAt = value;
                return this;
            }

            public Builder UpdatedAt(string value)
            {
                updatedAt = value;
                return this;
            }

            public Builder BrandDisputeId(string value)
            {
                brandDisputeId = value;
                return this;
            }

            public Builder ReportedDate(string value)
            {
                reportedDate = value;
                return this;
            }

            public Builder Version(int? value)
            {
                version = value;
                return this;
            }

            public Builder LocationId(string value)
            {
                locationId = value;
                return this;
            }

            public Dispute Build()
            {
                return new Dispute(disputeId,
                    amountMoney,
                    reason,
                    state,
                    dueAt,
                    disputedPayment,
                    evidenceIds,
                    cardBrand,
                    createdAt,
                    updatedAt,
                    brandDisputeId,
                    reportedDate,
                    version,
                    locationId);
            }
        }
    }
}