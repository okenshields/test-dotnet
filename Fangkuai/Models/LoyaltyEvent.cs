using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class LoyaltyEvent 
    {
        public LoyaltyEvent(string id,
            string type,
            string createdAt,
            string loyaltyAccountId,
            string source,
            Models.LoyaltyEventAccumulatePoints accumulatePoints = null,
            Models.LoyaltyEventCreateReward createReward = null,
            Models.LoyaltyEventRedeemReward redeemReward = null,
            Models.LoyaltyEventDeleteReward deleteReward = null,
            Models.LoyaltyEventAdjustPoints adjustPoints = null,
            string locationId = null,
            Models.LoyaltyEventExpirePoints expirePoints = null,
            Models.LoyaltyEventOther otherEvent = null)
        {
            Id = id;
            Type = type;
            CreatedAt = createdAt;
            AccumulatePoints = accumulatePoints;
            CreateReward = createReward;
            RedeemReward = redeemReward;
            DeleteReward = deleteReward;
            AdjustPoints = adjustPoints;
            LoyaltyAccountId = loyaltyAccountId;
            LocationId = locationId;
            Source = source;
            ExpirePoints = expirePoints;
            OtherEvent = otherEvent;
        }

        /// <summary>
        /// The Square-assigned ID of the loyalty event.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; }

        /// <summary>
        /// The type of the loyalty event.
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; }

        /// <summary>
        /// The timestamp when the event was created, in RFC 3339 format.
        /// </summary>
        [JsonProperty("created_at")]
        public string CreatedAt { get; }

        /// <summary>
        /// Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
        /// </summary>
        [JsonProperty("accumulate_points")]
        public Models.LoyaltyEventAccumulatePoints AccumulatePoints { get; }

        /// <summary>
        /// Provides metadata when the event `type` is `CREATE_REWARD`.
        /// </summary>
        [JsonProperty("create_reward")]
        public Models.LoyaltyEventCreateReward CreateReward { get; }

        /// <summary>
        /// Provides metadata when the event `type` is `REDEEM_REWARD`.
        /// </summary>
        [JsonProperty("redeem_reward")]
        public Models.LoyaltyEventRedeemReward RedeemReward { get; }

        /// <summary>
        /// Provides metadata when the event `type` is `DELETE_REWARD`.
        /// </summary>
        [JsonProperty("delete_reward")]
        public Models.LoyaltyEventDeleteReward DeleteReward { get; }

        /// <summary>
        /// Provides metadata when the event `type` is `ADJUST_POINTS`.
        /// </summary>
        [JsonProperty("adjust_points")]
        public Models.LoyaltyEventAdjustPoints AdjustPoints { get; }

        /// <summary>
        /// The ID of the [loyalty account](#type-LoyaltyAccount) in which the event occurred.
        /// </summary>
        [JsonProperty("loyalty_account_id")]
        public string LoyaltyAccountId { get; }

        /// <summary>
        /// The ID of the [location](#type-Location) where the event occurred.
        /// </summary>
        [JsonProperty("location_id")]
        public string LocationId { get; }

        /// <summary>
        /// Defines whether the event was generated by the Square Point of Sale.
        /// </summary>
        [JsonProperty("source")]
        public string Source { get; }

        /// <summary>
        /// Provides metadata when the event `type` is `EXPIRE_POINTS`.
        /// </summary>
        [JsonProperty("expire_points")]
        public Models.LoyaltyEventExpirePoints ExpirePoints { get; }

        /// <summary>
        /// Provides metadata when the event `type` is `OTHER`.
        /// </summary>
        [JsonProperty("other_event")]
        public Models.LoyaltyEventOther OtherEvent { get; }

        public Builder ToBuilder()
        {
            var builder = new Builder(Id,
                Type,
                CreatedAt,
                LoyaltyAccountId,
                Source)
                .AccumulatePoints(AccumulatePoints)
                .CreateReward(CreateReward)
                .RedeemReward(RedeemReward)
                .DeleteReward(DeleteReward)
                .AdjustPoints(AdjustPoints)
                .LocationId(LocationId)
                .ExpirePoints(ExpirePoints)
                .OtherEvent(OtherEvent);
            return builder;
        }

        public class Builder
        {
            private string id;
            private string type;
            private string createdAt;
            private string loyaltyAccountId;
            private string source;
            private Models.LoyaltyEventAccumulatePoints accumulatePoints;
            private Models.LoyaltyEventCreateReward createReward;
            private Models.LoyaltyEventRedeemReward redeemReward;
            private Models.LoyaltyEventDeleteReward deleteReward;
            private Models.LoyaltyEventAdjustPoints adjustPoints;
            private string locationId;
            private Models.LoyaltyEventExpirePoints expirePoints;
            private Models.LoyaltyEventOther otherEvent;

            public Builder(string id,
                string type,
                string createdAt,
                string loyaltyAccountId,
                string source)
            {
                this.id = id;
                this.type = type;
                this.createdAt = createdAt;
                this.loyaltyAccountId = loyaltyAccountId;
                this.source = source;
            }
            public Builder Id(string value)
            {
                id = value;
                return this;
            }

            public Builder Type(string value)
            {
                type = value;
                return this;
            }

            public Builder CreatedAt(string value)
            {
                createdAt = value;
                return this;
            }

            public Builder LoyaltyAccountId(string value)
            {
                loyaltyAccountId = value;
                return this;
            }

            public Builder Source(string value)
            {
                source = value;
                return this;
            }

            public Builder AccumulatePoints(Models.LoyaltyEventAccumulatePoints value)
            {
                accumulatePoints = value;
                return this;
            }

            public Builder CreateReward(Models.LoyaltyEventCreateReward value)
            {
                createReward = value;
                return this;
            }

            public Builder RedeemReward(Models.LoyaltyEventRedeemReward value)
            {
                redeemReward = value;
                return this;
            }

            public Builder DeleteReward(Models.LoyaltyEventDeleteReward value)
            {
                deleteReward = value;
                return this;
            }

            public Builder AdjustPoints(Models.LoyaltyEventAdjustPoints value)
            {
                adjustPoints = value;
                return this;
            }

            public Builder LocationId(string value)
            {
                locationId = value;
                return this;
            }

            public Builder ExpirePoints(Models.LoyaltyEventExpirePoints value)
            {
                expirePoints = value;
                return this;
            }

            public Builder OtherEvent(Models.LoyaltyEventOther value)
            {
                otherEvent = value;
                return this;
            }

            public LoyaltyEvent Build()
            {
                return new LoyaltyEvent(id,
                    type,
                    createdAt,
                    loyaltyAccountId,
                    source,
                    accumulatePoints,
                    createReward,
                    redeemReward,
                    deleteReward,
                    adjustPoints,
                    locationId,
                    expirePoints,
                    otherEvent);
            }
        }
    }
}