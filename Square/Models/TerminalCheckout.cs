using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class TerminalCheckout 
    {
        public TerminalCheckout(Models.Money amountMoney,
            Models.DeviceCheckoutOptions deviceOptions,
            string id = null,
            string referenceId = null,
            string note = null,
            string deadlineDuration = null,
            string status = null,
            string cancelReason = null,
            IList<string> paymentIds = null,
            string createdAt = null,
            string updatedAt = null)
        {
            Id = id;
            AmountMoney = amountMoney;
            ReferenceId = referenceId;
            Note = note;
            DeviceOptions = deviceOptions;
            DeadlineDuration = deadlineDuration;
            Status = status;
            CancelReason = cancelReason;
            PaymentIds = paymentIds;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// A unique ID for this `TerminalCheckout`
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("amount_money")]
        public Models.Money AmountMoney { get; }

        /// <summary>
        /// An optional user-defined reference ID which can be used to associate
        /// this TerminalCheckout to another entity in an external system. For example, an order
        /// ID generated by a third-party shopping cart. Will also be associated with any payments
        /// used to complete the checkout.
        /// </summary>
        [JsonProperty("reference_id")]
        public string ReferenceId { get; }

        /// <summary>
        /// An optional note to associate with the checkout, as well any payments used to complete the checkout.
        /// </summary>
        [JsonProperty("note")]
        public string Note { get; }

        /// <summary>
        /// Getter for device_options
        /// </summary>
        [JsonProperty("device_options")]
        public Models.DeviceCheckoutOptions DeviceOptions { get; }

        /// <summary>
        /// The duration as an RFC 3339 duration, after which the checkout will be automatically canceled.
        /// TerminalCheckouts that are PENDING will be automatically CANCELED and have a cancellation reason
        /// of “TIMED\_OUT”.
        /// Default: 5 minutes from creation
        /// Maximum: 5 minutes
        /// </summary>
        [JsonProperty("deadline_duration")]
        public string DeadlineDuration { get; }

        /// <summary>
        /// The status of the `TerminalCheckout`.
        /// Options: PENDING, IN\_PROGRESS, CANCELED, COMPLETED
        /// </summary>
        [JsonProperty("status")]
        public string Status { get; }

        /// <summary>
        /// Getter for cancel_reason
        /// </summary>
        [JsonProperty("cancel_reason")]
        public string CancelReason { get; }

        /// <summary>
        /// A list of payments created by this `TerminalCheckout`.
        /// </summary>
        [JsonProperty("payment_ids")]
        public IList<string> PaymentIds { get; }

        /// <summary>
        /// The time when the `TerminalCheckout` was created as an RFC 3339 timestamp.
        /// </summary>
        [JsonProperty("created_at")]
        public string CreatedAt { get; }

        /// <summary>
        /// The time when the `TerminalCheckout` was last updated as an RFC 3339 timestamp.
        /// </summary>
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; }

        public Builder ToBuilder()
        {
            var builder = new Builder(AmountMoney,
                DeviceOptions)
                .Id(Id)
                .ReferenceId(ReferenceId)
                .Note(Note)
                .DeadlineDuration(DeadlineDuration)
                .Status(Status)
                .CancelReason(CancelReason)
                .PaymentIds(PaymentIds)
                .CreatedAt(CreatedAt)
                .UpdatedAt(UpdatedAt);
            return builder;
        }

        public class Builder
        {
            private Models.Money amountMoney;
            private Models.DeviceCheckoutOptions deviceOptions;
            private string id;
            private string referenceId;
            private string note;
            private string deadlineDuration;
            private string status;
            private string cancelReason;
            private IList<string> paymentIds = new List<string>();
            private string createdAt;
            private string updatedAt;

            public Builder(Models.Money amountMoney,
                Models.DeviceCheckoutOptions deviceOptions)
            {
                this.amountMoney = amountMoney;
                this.deviceOptions = deviceOptions;
            }
            public Builder AmountMoney(Models.Money value)
            {
                amountMoney = value;
                return this;
            }

            public Builder DeviceOptions(Models.DeviceCheckoutOptions value)
            {
                deviceOptions = value;
                return this;
            }

            public Builder Id(string value)
            {
                id = value;
                return this;
            }

            public Builder ReferenceId(string value)
            {
                referenceId = value;
                return this;
            }

            public Builder Note(string value)
            {
                note = value;
                return this;
            }

            public Builder DeadlineDuration(string value)
            {
                deadlineDuration = value;
                return this;
            }

            public Builder Status(string value)
            {
                status = value;
                return this;
            }

            public Builder CancelReason(string value)
            {
                cancelReason = value;
                return this;
            }

            public Builder PaymentIds(IList<string> value)
            {
                paymentIds = value;
                return this;
            }

            public Builder CreatedAt(string value)
            {
                createdAt = value;
                return this;
            }

            public Builder UpdatedAt(string value)
            {
                updatedAt = value;
                return this;
            }

            public TerminalCheckout Build()
            {
                return new TerminalCheckout(amountMoney,
                    deviceOptions,
                    id,
                    referenceId,
                    note,
                    deadlineDuration,
                    status,
                    cancelReason,
                    paymentIds,
                    createdAt,
                    updatedAt);
            }
        }
    }
}